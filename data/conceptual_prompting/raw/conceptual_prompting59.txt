Here's the Python code to calculate the Lorenz curve for a given distribution of income or wealth:

```python
import numpy as np

def calculate_lorenz_curve(data):
    """
    Function to calculate the Lorenz curve for a given distribution.

    Parameters:
    - data: List of values representing the income or wealth distribution

    Returns:
    - x_values: numpy.array, Cumulative percentages of the population
    - y_values: numpy.array, Cumulative percentages of the income or wealth
    """
    sorted_data = np.sort(data)
    cum_data = np.cumsum(sorted_data)
    total_data_sum = cum_data[-1]

    x_values = np.arange(1, len(data) + 1) / len(data)
    y_values = cum_data / total_data_sum

    return x_values, y_values

# Example usage:
data = [20_000, 25_000, 48_000, 50_000, 75_000, 80_000, 90_000, 100_000, 120_000, 150_000]
x_values, y_values = calculate_lorenz_curve(data)
print(x_values, y_values)
```

Now, here's a separate code block that contains pytest tests for the above code:

```python
import pytest
import numpy as np
from lorenz_curve import calculate_lorenz_curve

def test_lorenz_curve():
    data = [10, 20, 30, 40, 50]
    expected_x_values = np.array([0.2, 0.4, 0.6, 0.8, 1.0])
    expected_y_values = np.array([0.04, 0.12, 0.24, 0.44, 1.0])

    x_values, y_values = calculate_lorenz_curve(data)

    np.testing.assert_almost_equal(x_values, expected_x_values)
    np.testing.assert_almost_equal(y_values, expected_y_values)

def test_negative_values():
    with pytest.raises(ValueError):
        data = [10, -20, 30, 40, 50]
        x_values, y_values = calculate_lorenz_curve(data)

if __name__ == "__main__":
    pytest.main()
```

Make sure to save the Lorenz curve code in a file named `lorenz_curve.py` and the pytest code in a file named `test_lorenz_curve.py`. You can then execute the tests with the `pytest` command.

*Note: Install pytest by running `pip install pytest` if you don't have it installed already.
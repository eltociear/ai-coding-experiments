Here's a Python function to calculate the ecological niche overlap between two species given their resource utilization curves:

```python
import numpy as np

def create_resource_utilization_curve(num_resources, min_value=0, max_value=1):
    """
    Generate a random resource utilization curve.
    
    Params:
    -------
    num_resources: int
        Number of resources to be allocated
    min_value: float, optional (default: 0)
        Minimum value for resource allocation
    max_value: float, optional (default: 1)
        Maximum value for resource allocation
        
    Returns:
    --------
    np.array
        Array with resource allocations normalized to sum to 1
    """
    resources = np.random.uniform(min_value, max_value, num_resources)
    resources /= np.sum(resources)
    return resources

def calculate_ecological_niche_overlap(species1_resources, species2_resources):
    """
    Calculate the ecological niche overlap between two species.
    
    Params:
    -------
    species1_resources: np.array
        Array containing the resource utilization curve for species 1
    species2_resources: np.array
        Array containing the resource utilization curve for species 2
        
    Returns:
    --------
    float
        Ecological niche overlap value (ranges from 0 to 1)
    """
    if len(species1_resources) != len(species2_resources):
        raise ValueError("Resource utilization curves should have the same length")
    return np.sum(np.minimum(species1_resources, species2_resources))

# Example usage
species1_resources = create_resource_utilization_curve(10)
species2_resources = create_resource_utilization_curve(10)
overlap = calculate_ecological_niche_overlap(species1_resources, species2_resources)
print("Ecological niche overlap:", overlap)
```

Here's a set of pytest tests that exercise the functions:

```python
import pytest
import numpy as np

def test_create_resource_utilization_curve():
    curve = create_resource_utilization_curve(5)
    assert len(curve) == 5
    assert np.isclose(np.sum(curve), 1)
    assert np.all(curve >= 0) and np.all(curve <= 1)

def test_calculate_ecological_niche_overlap():
    curve1 = np.array([0.1, 0.2, 0.3, 0.4])
    curve2 = np.array([0.4, 0.3, 0.2, 0.1])
    overlap = calculate_ecological_niche_overlap(curve1, curve2)
    assert np.isclose(overlap, 0.4)

    curve3 = np.array([1, 0, 0, 0])
    curve4 = np.array([0, 0, 0, 1])
    overlap = calculate_ecological_niche_overlap(curve3, curve4)
    assert np.isclose(overlap, 0)

    curve5 = np.array([0.1, 0.2, 0.3, 0.4])
    curve6 = np.array([0.1, 0.2, 0.3])
    with pytest.raises(ValueError):
        overlap = calculate_ecological_niche_overlap(curve5, curve6)

```
Here's the Python code to perform the Kolmogorov-Smirnov test to compare two probability distributions using SciPy:

```python
import numpy as np
from scipy.stats import ks_2samp

def generate_random_samples(dist_func, size=100, *args, **kwargs):
    """
    Generate random samples from the given distribution function.
    
    :param dist_func: Distribution function to generate samples from
    :param size: Number of samples to generate (default is 100)
    :param *args: Additional positional arguments for the distribution function
    :param **kwargs: Additional keyword arguments for the distribution function
    :return: NumPy array of generated samples
    """
    samples = dist_func.rvs(size=size, *args, **kwargs)
    return samples

def perform_ks_test(sample1, sample2):
    """
    Perform the Kolmogorov-Smirnov test on two sets of samples.
    
    :param sample1: First set of samples
    :param sample2: Second set of samples
    :return: KS statistic and p-value
    """
    ks_statistic, p_value = ks_2samp(sample1, sample2)
    return ks_statistic, p_value

if __name__ == "__main__":
    from scipy.stats import norm, expon

    np.random.seed(42)

    # Generate random samples from normal and exponential distributions
    normal_samples1 = generate_random_samples(norm, size=100, loc=0, scale=1)
    normal_samples2 = generate_random_samples(norm, size=100, loc=0, scale=1)
    exp_samples = generate_random_samples(expon, size=100, scale=1)
    
    # Perform KS test on various sample combinations
    ks_stat_same, p_value_same = perform_ks_test(normal_samples1, normal_samples2)
    ks_stat_diff, p_value_diff = perform_ks_test(normal_samples1, exp_samples)
    
    print("KS test result for same distributions:")
    print(f"KS statistic: {ks_stat_same}, p-value: {p_value_same}")

    print("KS test result for different distributions:")
    print(f"KS statistic: {ks_stat_diff}, p-value: {p_value_diff}")
```

Now here's a set of pytest tests for the functions:

```python
import pytest
from scipy.stats import norm, expon

def test_generate_random_samples():
    np.random.seed(42)
    samples = generate_random_samples(norm, size=50, loc=0, scale=1)
    assert len(samples) == 50, "Number of samples should match the specified size"
    assert np.mean(samples) <= 0.1, "Mean value of generated samples should be close to the specified mean"

def test_perform_ks_test():
    np.random.seed(42)
    normal_samples1 = generate_random_samples(norm, size=100, loc=0, scale=1)
    normal_samples2 = generate_random_samples(norm, size=100, loc=0, scale=1)
    exp_samples = generate_random_samples(expon, size=100, scale=1)

    ks_stat_same, p_value_same = perform_ks_test(normal_samples1, normal_samples2)
    ks_stat_diff, p_value_diff = perform_ks_test(normal_samples1, exp_samples)

    assert ks_stat_same < ks_stat_diff, "KS statistic for same distributions should be smaller"
    assert p_value_same > p_value_diff, "p-value for same distributions should be larger"
    assert p_value_same > 0.05, "p-value for same distributions should be larger than 0.05"

if __name__ == "__main__":
    pytest.main([__file__])
```
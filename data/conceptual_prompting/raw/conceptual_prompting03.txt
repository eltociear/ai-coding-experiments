Here's the Python program to compute the edit distance between two strings using dynamic programming:

```python
def edit_distance(s1: str, s2: str) -> int:
    """Compute the edit distance between two strings using dynamic programming."""
    m = len(s1)
    n = len(s2)

    # Create a table to store the computed edit distances
    distance_matrix = [[0] * (n + 1) for _ in range(m + 1)]

    # Initialize the table with distances based on inserting or deleting characters
    for i in range(m + 1):
        distance_matrix[i][0] = i

    for j in range(n + 1):
        distance_matrix[0][j] = j

    # Compute the edit distances using dynamic programming
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if s1[i - 1] == s2[j - 1]:
                cost = 0
            else:
                cost = 1

            distance_matrix[i][j] = min(
                distance_matrix[i - 1][j] + 1,        # deletion
                distance_matrix[i][j - 1] + 1,        # insertion
                distance_matrix[i - 1][j - 1] + cost  # substitution
            )

    return distance_matrix[m][n]


if __name__ == "__main__":
    s1 = "kitten"
    s2 = "sitting"
    print(f"Edit distance between '{s1}' and '{s2}' is: {edit_distance(s1, s2)}")
```

Here are the pytest tests that exercise the edit_distance() function:

```python
import pytest
from edit_distance import edit_distance

def test_edit_distance_case_1():
    assert edit_distance("kitten", "sitting") == 3

def test_edit_distance_case_2():
    assert edit_distance("abcdef", "azced") == 3

def test_edit_distance_case_3():
    assert edit_distance("ai", "ai") == 0

def test_edit_distance_case_4():
    assert edit_distance("abc", "") == 3

def test_edit_distance_case_5():
    assert edit_distance("", "xyz") == 3

def test_edit_distance_case_6():
    assert edit_distance("", "") == 0

if __name__ == "__main__":
    pytest.main()
```
Here's the Python code to implement a logistic regression model for binary classification:

```python
import numpy as np

class LogisticRegression:
    def __init__(self, learning_rate=0.01, num_iterations=1000):
        self.learning_rate = learning_rate
        self.num_iterations = num_iterations

    def _sigmoid(self, z):
        return 1 / (1 + np.exp(-z))
    
    def _loss(self, y_true, y_pred):
        return -np.mean(y_true * np.log(y_pred) + (1 - y_true) * np.log(1 - y_pred))

    def fit(self, X, y):
        self.weights = np.zeros(X.shape[1])
        self.bias = 0
        
        for _ in range(self.num_iterations):
            linear_model = np.dot(X, self.weights) + self.bias
            y_pred = self._sigmoid(linear_model)
            dw = (1 / X.shape[0]) * np.dot(X.T, (y_pred - y))
            db = (1 / X.shape[0]) * np.sum(y_pred - y)
            self.weights -= self.learning_rate * dw
            self.bias -= self.learning_rate * db

    def predict_proba(self, X):
        linear_model = np.dot(X, self.weights) + self.bias
        return self._sigmoid(linear_model)

    def predict(self, X, threshold=0.5):
        return (self.predict_proba(X) >= threshold).astype(int)
```

Here's a set of pytest tests that exercise each of the functions:

```python
import numpy as np
import pytest
from sklearn.datasets import make_classification


@pytest.fixture
def synthetic_data():
    X, y = make_classification(n_samples=100, n_features=2, n_classes=2, n_clusters_per_class=1, random_state=42)
    return X, y

def test_sigmoid():
    lr = LogisticRegression()
    assert np.isclose(lr._sigmoid(0), 0.5)
    
def test_loss():
    lr = LogisticRegression()
    y_true = np.array([1, 0, 1, 0])
    y_pred = np.array([0.9, 0.1, 0.8, 0.2])
    assert np.isclose(lr._loss(y_true, y_pred), 0.164252033486018)

def test_fit_and_predict(synthetic_data):
    X, y = synthetic_data
    lr = LogisticRegression(learning_rate=0.1, num_iterations=1000)
    lr.fit(X, y)
    y_pred = lr.predict(X)
    accuracy = np.mean(y_pred == y) * 100
    assert accuracy >= 90
```

In order to run the tests, save the logistic regression implementation and the test suite in separate Python files and use `pytest` to execute them.
Here's a Python script to compute the Gini index for a given dataset:

```python
import numpy as np

def gini_coefficient(dataset):
    """
    Compute the Gini coefficient of a given dataset.
    Args:
    - dataset (list): A list of numerical values representing the dataset.
    Returns:
    - float: The Gini coefficient.
    """
    dataset = np.array(dataset)
    n = len(dataset)
    dataset_sorted = np.sort(dataset)
    index = np.arange(1, n+1)
    gini = (np.sum((2 * index - n - 1) * dataset_sorted)) / (n * np.sum(dataset_sorted))
    
    return gini

def main():
    # Example dataset
    dataset = [60000, 30000, 10000, 5000, 20000, 40000, 70000, 80000]
    gini_index = gini_coefficient(dataset)
    print(f"The Gini index for the given dataset is: {gini_index:.4f}")

if __name__ == "__main__":
    main()
```

Now, here are some pytest tests to exercise each function:

```python
import pytest
from gini import gini_coefficient

def test_gini_coefficient():
    # With a uniform dataset
    dataset1 = [1, 1, 1, 1, 1]
    assert gini_coefficient(dataset1) == 0.0

    # With an ascending dataset
    dataset2 = [1, 2, 3, 4, 5, 6, 7]
    assert pytest.approx(gini_coefficient(dataset2), 0.2381)

    # With a descending dataset
    dataset3 = [7, 6, 5, 4, 3, 2, 1]
    assert pytest.approx(gini_coefficient(dataset3), 0.2381)

    # With a mixed dataset
    dataset4 = [1, 7, 2, 6, 3, 5, 4]
    assert pytest.approx(gini_coefficient(dataset4), 0.2381)

    # With a dataset containing duplicate values
    dataset5 = [3, 3, 3, 4, 4, 5, 5, 5]
    assert pytest.approx(gini_coefficient(dataset5), 0.1042)

```
Save the Python script as "gini.py" and the test script as "test_gini.py". Run the tests using pytest by executing the command `pytest test_gini.py`.
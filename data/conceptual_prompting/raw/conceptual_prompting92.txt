Here is a Python implementation of Principal Component Analysis (PCA) using NumPy and Matplotlib libraries:

```python
import numpy as np
import matplotlib.pyplot as plt

def generate_example_data():
    # Generate an example 2D dataset with 200 samples
    mean_values = [3, 5]
    covariance_matrix = [[1.5, 1.0], [1.0, 1.5]]
    data = np.random.multivariate_normal(mean_values, covariance_matrix, size=200)
    return data

def normalize_data(data):
    # Normalize data by subtracting mean and dividing by standard deviation
    data_normalized = (data - np.mean(data, axis=0)) / np.std(data, axis=0)
    return data_normalized

def calculate_covariance_matrix(data):
    # Calculate the covariance matrix of normalized data
    covariance_matrix = np.dot(data.T, data) / (data.shape[0] - 1)
    return covariance_matrix

def perform_pca(input_data, num_components):
    # Normalize input data
    normalized_data = normalize_data(input_data)

    # Calculate covariance matrix
    covariance_matrix = calculate_covariance_matrix(normalized_data)

    # Calculate eigenvalues and eigenvectors
    eigenvalues, eigenvectors = np.linalg.eig(covariance_matrix)

    # Sort eigenvectors by decreasing eigenvalues
    sorted_indices = np.argsort(-eigenvalues)
    sorted_eigenvectors = eigenvectors[:, sorted_indices]

    # Project data onto the first "num_components" principal components
    transformed_data = np.dot(normalized_data, sorted_eigenvectors[:, :num_components])

    return transformed_data

if __name__ == "__main__":
    example_data = generate_example_data()
    pca_result = perform_pca(example_data, 2)

    # Plot the original data
    plt.scatter(example_data[:, 0], example_data[:, 1], label="Original Data")

    # Plot the PCA transformed data
    plt.scatter(pca_result[:, 0], pca_result[:, 1], label="PCA Transformed Data")
    plt.legend()
    plt.show()
```

Here is a set of pytest tests for the functions above:

```python
import pytest
import numpy as np

def test_generate_example_data():
    example_data = generate_example_data()
    assert example_data.shape == (200, 2)

def test_normalize_data():
    sample_data = np.array([[3, 5], [6, 8], [1, 3], [9, 12]])
    normalized_data = normalize_data(sample_data)
    assert np.allclose(np.mean(normalized_data, axis=0), [0, 0])
    assert np.allclose(np.std(normalized_data, axis=0), [1, 1])

def test_calculate_covariance_matrix():
    sample_data = np.array([[1, 2], [2, 3], [3, 4], [4, 5]])
    normalized_data = normalize_data(sample_data)
    covariance_matrix = calculate_covariance_matrix(normalized_data)
    assert covariance_matrix.shape == (2, 2)

@pytest.mark.parametrize("num_components", [1, 2, 3])
def test_perform_pca(num_components):
    sample_data = np.array([[1, 0, 1], [2, 1, 0], [3, 2, 2], [4, 3, 4]])
    pca_result = perform_pca(sample_data, num_components)
    assert pca_result.shape == (4, num_components)
```
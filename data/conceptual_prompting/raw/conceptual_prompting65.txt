Here's a Python implementation of the binary search algorithm:

```python
def binary_search(sorted_list, target):
    """
    Implement binary search algorithm to search for target in sorted_list.

    Args:
    sorted_list (list of int): The sorted list in which to search for target.
    target (int): The value to search for.

    Returns:
    int: The index where the target is found, -1 if not found.
    """
    low, high = 0, len(sorted_list) - 1

    while low <= high:
        mid = (low + high) // 2
        mid_val = sorted_list[mid]

        if mid_val == target:
            return mid
        elif mid_val < target:
            low = mid + 1
        else:
            high = mid - 1

    return -1


# Sample usage
sorted_list = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
target = 13
index = binary_search(sorted_list, target)
print(f"Index of {target} in sorted_list is: {index}")  # Output: Index of 13 in sorted_list is: 6
```

Here's a set of pytest test cases for the binary search implementation:

```python
import pytest
from binary_search import binary_search


# Test data
@pytest.mark.parametrize("sorted_list, target, expected", [
    ([1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 13, 6),
    ([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 5, -1),
    ([-12, -8, -6, -4, 0, 2, 6, 8, 15], 15, 8),
    ([-25, -20, -15, -10, -5, 0, 5, 10, 15], -20, 1),
    ([20, 50, 80, 90, 100, 110, 500, 900], 50, 1),
])


def test_binary_search(sorted_list, target, expected):
    assert binary_search(sorted_list, target) == expected
```
Here's the Python code to implement a linear regression model using the least squares method:

```python
import numpy as np

def get_data():
    # Example data (x, y)
    x = np.array([1, 2, 3, 4, 5])    
    y = np.array([2, 4, 5, 4, 5])

    return x, y

def calculate_means(x, y):
    # Calculate mean values
    x_mean = np.mean(x)
    y_mean = np.mean(y)

    return x_mean, y_mean

def calculate_coefficients(x, y, x_mean, y_mean):
    # Calculate slope (m) and intercept (b) of the linear regression
    m = np.sum((x - x_mean) * (y - y_mean)) / np.sum((x - x_mean)**2)
    b = y_mean - m * x_mean

    return m, b

def linear_regression(x, y):
    x_mean, y_mean = calculate_means(x, y)
    m, b = calculate_coefficients(x, y, x_mean, y_mean)

    return m, b

def test_data():
    x_data, y_data = get_data()

    assert len(x_data) == len(y_data), "Data lengths should be equal"

def test_calculate_means():
    x_data, y_data = get_data()

    x_mean, y_mean = calculate_means(x_data, y_data)

    assert x_mean == np.mean(x_data), "X mean should be equal to numpy mean"
    assert y_mean == np.mean(y_data), "Y mean should be equal to numpy mean"

def test_calculate_coefficients():
    x_data, y_data = get_data()

    x_mean, y_mean = calculate_means(x_data, y_data)
    m, b = calculate_coefficients(x_data, y_data, x_mean, y_mean)

    assert isinstance(m, float), "Slope should be a float value"
    assert isinstance(b, float), "Intercept should be a float value"

def test_linear_regression():
    x_data, y_data = get_data()

    m, b = linear_regression(x_data, y_data)

    assert isinstance(m, float), "Slope should be a float value"
    assert isinstance(b, float), "Intercept should be a float value"

if __name__ == "__main__":
    x, y = get_data()
    m, b = linear_regression(x, y)

    print("Slope (m):", m)
    print("Intercept (b):", b)
```

Here are the pytest tests to exercise each of the functions:

```python
import pytest
from your_module import get_data, test_data, calculate_means, test_calculate_means, calculate_coefficients, test_calculate_coefficients, linear_regression, test_linear_regression

def test_get_data():
    x_data, y_data = get_data()

    assert len(x_data) == len(y_data), "Data lengths should be equal"

def test_calculate_means():
    x_data, y_data = get_data()

    x_mean, y_mean = calculate_means(x_data, y_data)

    assert x_mean == np.mean(x_data), "X mean should be equal to numpy mean"
    assert y_mean == np.mean(y_data), "Y mean should be equal to numpy mean"

def test_calculate_coefficients():
    x_data, y_data = get_data()

    x_mean, y_mean = calculate_means(x_data, y_data)
    m, b = calculate_coefficients(x_data, y_data, x_mean, y_mean)

    assert isinstance(m, float), "Slope should be a float value"
    assert isinstance(b, float), "Intercept should be a float value"

def test_linear_regression():
    x_data, y_data = get_data()

    m, b = linear_regression(x_data, y_data)

    assert isinstance(m, float), "Slope should be a float value"
    assert isinstance(b, float), "Intercept should be a float value"

```
Make sure to replace `your_module` with the appropriate module name in the import statement. These tests can be run with `pytest`.